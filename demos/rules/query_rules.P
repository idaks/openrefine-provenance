% These rules should be compatible with both Datalog and standard Prolog.

:- table import_state/4.
import_state(SourceUri, DatasetId, ImportArrayId, ImportStateId) :-
    source(SourceId, SourceUri, _),
    dataset(DatasetId, SourceId, ImportArrayId),
    state(ImportStateId, ImportArrayId, nil).

:- table column_rename/5.
column_rename(DatasetId, ArrayId, StateId, ColumnName, NewColumnName) :-
    array(ArrayId, DatasetId),
    state(StateId, ArrayId, _),
    column_schema(_, _, _, _, NewColumnName, _, PreviousColumnSchemaId),
    column_schema(PreviousColumnSchemaId, _, StateId, _, ColumnName, _, _),
    NewColumnName \== ColumnName.

:- table first_column/2.
first_column(StateId, FirstColumnId) :-
    column_schema_at_state(ColumnSchemaId, FirstColumnId, StateId),
    column_schema(ColumnSchemaId, FirstColumnId, _, _, _, nil, _).

%:- table last_column/3.
last_column(StateId, LastColumnId, LastColumnSchemaId) :-
    column_schema_at_state(LastColumnSchemaId, LastColumnId, StateId),
    column_schema_at_state(NextColumnSchemaId, _, StateId),
    not column_schema(NextColumnSchemaId, _, _, _, _, LastColumnId, _).

% RULE : final_array_state/2 - returns last state of array
:- table final_array_state/2.
final_array_state(ArrayId, StateId) :-
    state(StateId, ArrayId, _),
    not state(_, ArrayId, StateId).

% RULE : next_column_schema_at_or_before_state/2 - succeeds if a column schema follows the one
% identified by ColumnSchemaId and the later column schema was created at StateId or earlier
:- table next_column_schema_at_or_before_state/2.
next_column_schema_at_or_before_state(ColumnSchemaId, StateId) :-
    column_schema(_, _, NextColumnSchemaStateId, _, _, _, ColumnSchemaId),
    NextColumnSchemaStateId =< StateId.

% RULE : column_schema_at_state/3 - returns latest ColumnSchemaId for ColumnId as of StateId
:- table column_schema_at_state/3.
column_schema_at_state(ColumnSchemaId, ColumnId, StateId) :-
    column_schema(ColumnSchemaId, ColumnId, AssignmentStateId, _, _, _, _),
    StateId >= AssignmentStateId,
    not next_column_schema_at_or_before_state(ColumnSchemaId, StateId).

% RULE : column_name/2 - returns ColumnName for ColumnSchemaId
:- table column_name/2.
column_name(ColumnSchemaId, ColumnName) :-
    column_schema(ColumnSchemaId, _, _, _, ColumnName, _, _).

% RULE : column_name/3 - returns ColumnName for ColumnId effective at StateId
:- table column_name/3.
column_name(ColumnId, StateId, ColumnName) :-
    column_schema_at_state(ColumnSchemaId, ColumnId, StateId),
    column_schema(ColumnSchemaId, _, _, _, ColumnName, _, _).

% RULE : schema_of_previous_column/3 - returns ID of schema for column at left as of StateId
:- table schema_of_previous_column/3.
schema_of_previous_column(ColumnSchemaId, SchemaIdForPreviousColumn, StateId) :-
    column_schema(ColumnSchemaId, _, _, _, _, PreviousColumnId, _),
    column_schema_at_state(SchemaIdForPreviousColumn, PreviousColumnId, StateId).

