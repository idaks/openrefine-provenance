
:- compiler_options([xpp_on]).
# mode standard cpp

%#define DEBUG

#ifdef DEBUG

#mode push
#mode nostring "\""
#define DEBUG_CONTEXT(name) CURRENT_CONTEXT=name, fmt_write("\ndebug_context(%S)\n", arg(CURRENT_CONTEXT))
#define DEBUG_VAR(varname) fmt_write("debug_var(%S, varname, '%S').\n", arg(CURRENT_CONTEXT, varname))
#define DEBUG_LOG(message)  fmt_write("debug_log(%S, '%S').\n", arg(CURRENT_CONTEXT, message))
#mode pop

#else

#define DEBUG_CONTEXT(name) true
#define DEBUG_VAR(varname) true
#define DEBUG_LOG(message) true

#endif


% These rules should be compatible with both Datalog and standard Prolog.

:- table import_state/4.
import_state(SourceUri, DatasetId, ImportArrayId, ImportStateId) :-
    source(SourceId, SourceUri, _),
    dataset(DatasetId, SourceId, ImportArrayId),
    state(ImportStateId, ImportArrayId, nil).

:- table column_rename/5.
column_rename(DatasetId, ArrayId, StateId, ColumnName, NewColumnName) :-
    array(ArrayId, DatasetId),
    state(StateId, ArrayId, _),
    column_schema(_, _, _, _, NewColumnName, _, PreviousColumnSchemaId),
    column_schema(PreviousColumnSchemaId, _, StateId, _, ColumnName, _, _),
    NewColumnName \== ColumnName.

%:- table last_column/3.
last_column(StateId, ColumnId, ColumnSchemaId) :-
    DEBUG_CONTEXT(last_column),
    column_schema_at_state(ColumnSchemaId, ColumnId, StateId),
    DEBUG_VAR(ColumnId),
    DEBUG_VAR(ColumnSchemaId),
    not (
        column_schema_at_state(SchemaIdOfNextColumn, _, StateId),
        DEBUG_VAR(SchemaIdOfNextColumn),
        column_schema(SchemaIdOfNextColumn, _, _, _, _, ColumnId, _)
    ).

:- table first_column/3.
first_column(StateId, ColumnId, ColumnSchemaId) :-
    DEBUG_CONTEXT('first_column/3'),
    column_schema_at_state(ColumnSchemaId, ColumnId, StateId),
    DEBUG_VAR(ColumnId), DEBUG_VAR(ColumnSchemaId),
    column_schema(ColumnSchemaId, ColumnId, _, _, _, nil, _).

:- table first_row/3.
first_row(StateId, RowId, RowPositionId) :-
    row_position_at_state(RowPositionId, RowId, StateId),
    row_position(RowPositionId, _, _, nil, _).

% RULE : final_array_state/2 - returns last state of array
:- table final_array_state/2.
final_array_state(ArrayId, StateId) :-
    state(StateId, ArrayId, _),
    not state(_, ArrayId, StateId).

% RULE : next_column_schema_at_or_before_state/2 - succeeds if a column schema follows the one
% identified by ColumnSchemaId and the later column schema was created at StateId or earlier
:- table next_column_schema_at_or_before_state/2.
next_column_schema_at_or_before_state(ColumnSchemaId, StateId) :-
    column_schema(_, _, NextColumnSchemaStateId, _, _, _, ColumnSchemaId),
    NextColumnSchemaStateId =< StateId.

% RULE : column_schema_at_state/3 - returns latest ColumnSchemaId for ColumnId as of StateId
:- table column_schema_at_state/3.
column_schema_at_state(ColumnSchemaId, ColumnId, StateId) :-
    column_schema(ColumnSchemaId, ColumnId, AssignmentStateId, _, _, _, _),
    StateId >= AssignmentStateId,
    not next_column_schema_at_or_before_state(ColumnSchemaId, StateId).

% RULE : next_column_schema_at_or_before_state/2
:- table next_row_position_at_or_before_state/2.
next_row_position_at_or_before_state(RowPositionId, StateId) :-
    row_position(_, _, NextRowPositionStateId, _, RowPositionId),
    NextRowPositionStateId =< StateId.

% RULE : row_position_at_state/3.
:- table row_position_at_state/3.
row_position_at_state(RowPosId, RowId, StateId) :-
    row_position(RowPosId, RowId, AssignmentStateId, _, _),
    StateId >= AssignmentStateId,
    not next_row_position_at_or_before_state(RowPosId, StateId).

% RULE : column_name/2 - returns ColumnName for ColumnSchemaId
:- table column_name/2.
column_name(ColumnSchemaId, ColumnName) :-
    column_schema(ColumnSchemaId, _, _, _, ColumnName, _, _).

% RULE : column_name/3 - returns ColumnName for ColumnId effective at StateId
:- table column_name/3.
column_name(ColumnId, StateId, ColumnName) :-
    column_schema_at_state(ColumnSchemaId, ColumnId, StateId),
    column_schema(ColumnSchemaId, _, _, _, ColumnName, _, _).

% RULE : schema_of_previous_column/3 - returns ID of schema for column at left as of StateId
:- table schema_of_previous_column/3.
schema_of_previous_column(ColumnSchemaId, SchemaIdForPreviousColumn, StateId) :-
    column_schema(ColumnSchemaId, _, _, _, _, PreviousColumnId, _),
    column_schema_at_state(SchemaIdForPreviousColumn, PreviousColumnId, StateId).

% RULE : column_index/3
column_index(ColumnId, StateId, ColumnIndex) :-
    DEBUG_CONTEXT('column_index/3 - BRANCH 1'),
    DEBUG_VAR(ColumnId), DEBUG_VAR(StateId),
    first_column(StateId, ColumnId, _),
    ColumnIndex = 1.

column_index(ColumnId, StateId, ColumnIndex) :-
    DEBUG_CONTEXT('column_index/3 - BRANCH 2'),
    DEBUG_VAR(ColumnId), DEBUG_VAR(StateId),
    column_schema_at_state(ColSchemaId, ColumnId, StateId),
    DEBUG_VAR(ColSchemaId),
    column_schema(ColSchemaId, _, _, _, _, PreviousColumnId, _),
    column_index(PreviousColumnId, StateId, PreviousColumnIndex),
    ColumnIndex is PreviousColumnIndex + 1.

% RULE : row_index/3
row_index(RowId, StateId, RowIndex) :-
    first_row(StateId, RowId, _),
    RowIndex = 1.
row_index(RowId, StateId, RowIndex) :-
    row_position_at_state(RowPosId, RowId, StateId),
    row_position(RowPosId, _, _, PrevRowId, _),
    row_index(PrevRowId, StateId, PreviousRowIndex),
    RowIndex is PreviousRowIndex + 1.

next_column(ColumnId, StateId, NextColumnId) :-
    column_schema_at_state(ColumnSchemaId, ColumnId, StateId),
    fmt_write('next_column ->  ColumnSchemaId = %S\n', arg(ColumnSchemaId)),
    column_schema(ColumnSchemaId, NextColumnId, _, _, _, ColumnId, _).

%llength([],0).
%llength([_|T], N) :- llength(T, Nt), N is Nt + 1.
